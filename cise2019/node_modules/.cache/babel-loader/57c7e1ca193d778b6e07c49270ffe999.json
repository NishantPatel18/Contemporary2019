{"ast":null,"code":"/*\n * password-generator\n * Copyright(c) 2011-2015 Bermi Ferrer <bermi@bermilabs.com>\n * MIT Licensed\n */\n(function (root) {\n  var localName, consonant, letter, password, vowel;\n  letter = /[a-z]$/i;\n  vowel = /[aeiou]$/i;\n  consonant = /[bcdfghjklmnpqrstvwxyz]$/i; // Defines the name of the local variable the passwordGenerator library will use\n  // this is specially useful if window.passwordGenerator is already being used\n  // by your application and you want a different name. For example:\n  //    // Declare before including the passwordGenerator library\n  //    var localPasswordGeneratorLibraryName = 'pass';\n\n  localName = root.localPasswordGeneratorLibraryName || \"generatePassword\", password = function (length, memorable, pattern, prefix) {\n    var char = \"\",\n        n,\n        i,\n        validChars = [];\n\n    if (length === null || typeof length === \"undefined\") {\n      length = 10;\n    }\n\n    if (memorable === null || typeof memorable === \"undefined\") {\n      memorable = true;\n    }\n\n    if (pattern === null || typeof pattern === \"undefined\") {\n      pattern = /\\w/;\n    }\n\n    if (prefix === null || typeof prefix === \"undefined\") {\n      prefix = '';\n    } // Non memorable passwords will pick characters from a pre-generated\n    // list of characters\n\n\n    if (!memorable) {\n      for (i = 33; 126 > i; i += 1) {\n        char = String.fromCharCode(i);\n\n        if (char.match(pattern)) {\n          validChars.push(char);\n        }\n      }\n\n      if (!validChars.length) {\n        throw new Error(\"Could not find characters that match the \" + \"password pattern \" + pattern + \". Patterns must match individual \" + \"characters, not the password as a whole.\");\n      }\n    }\n\n    while (prefix.length < length) {\n      if (memorable) {\n        if (prefix.match(consonant)) {\n          pattern = vowel;\n        } else {\n          pattern = consonant;\n        }\n\n        n = rand(33, 126);\n        char = String.fromCharCode(n);\n      } else {\n        char = validChars[rand(0, validChars.length)];\n      }\n\n      if (memorable) {\n        char = char.toLowerCase();\n      }\n\n      if (char.match(pattern)) {\n        prefix = \"\" + prefix + char;\n      }\n    }\n\n    return prefix;\n  };\n\n  function rand(min, max) {\n    var key,\n        value,\n        arr = new Uint8Array(max);\n    getRandomValues(arr);\n\n    for (key in arr) {\n      if (arr.hasOwnProperty(key)) {\n        value = arr[key];\n\n        if (value > min && value < max) {\n          return value;\n        }\n      }\n    }\n\n    return rand(min, max);\n  }\n\n  function getRandomValues(buf) {\n    if (root.crypto && root.crypto.getRandomValues) {\n      root.crypto.getRandomValues(buf);\n    } else if (typeof root.msCrypto === \"object\" && typeof root.msCrypto.getRandomValues === 'function') {\n      root.msCrypto.getRandomValues(buf);\n    } else if (module.exports === password && typeof require !== \"undefined\") {\n      var bytes = require(\"crypto\").randomBytes(buf.length);\n\n      buf.set(bytes);\n    } else {\n      throw new Error(\"No secure random number generator available.\");\n    }\n  }\n\n  (typeof exports !== 'undefined' ? exports : root)[localName] = password;\n\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      module.exports = password;\n    }\n  } // Establish the root object, `window` in the browser, or `global` on the server.\n\n})(this);","map":null,"metadata":{},"sourceType":"script"}