{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nikhil\\\\Documents\\\\GitHub\\\\Contemporary2019\\\\cise2019\\\\src\\\\components\\\\tree.js\";\nimport React, { Component } from \"react\";\nexport default class tree extends Component {\n  constructor() {\n    super();\n\n    this.getTrees = _ => {\n      fetch(\"http://localhost:3001/tree\").then(response => response.json()).then(response => this.setState({\n        tree: response.data\n      })).catch(err => console.error(err));\n    };\n\n    this.renderProduct = ({\n      tree_id,\n      tree_name,\n      tree_type,\n      tree_description\n    }) => React.createElement(\"div\", {\n      key: tree_id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \" \", tree_id), \" : \", tree_name, \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }), \" \", tree_type, \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }), \" \", tree_description, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }));\n\n    this.rest = ({\n      tree_name\n    }) => React.createElement(\"div\", {\n      key: tree_name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, tree_name)));\n\n    this.state = {\n      tree: []\n    };\n  }\n\n  componentDidMount() {\n    this.getTrees();\n  }\n\n  render() {\n    const tree = this.state.tree;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, tree.map(this.renderProduct), \"ol\");\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\Nikhil\\Documents\\GitHub\\Contemporary2019\\cise2019\\src\\components\\tree.js"],"names":["React","Component","tree","constructor","getTrees","_","fetch","then","response","json","setState","data","catch","err","console","error","renderProduct","tree_id","tree_name","tree_type","tree_description","rest","state","componentDidMount","render","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,eAAe,MAAMC,IAAN,SAAmBD,SAAnB,CAA6B;AAC1CE,EAAAA,WAAW,GAAG;AACZ;;AADY,SAWdC,QAXc,GAWHC,CAAC,IAAI;AACdC,MAAAA,KAAK,CAAC,4BAAD,CAAL,CACGC,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQC,QAAQ,IAAI,KAAKE,QAAL,CAAc;AAAER,QAAAA,IAAI,EAAEM,QAAQ,CAACG;AAAjB,OAAd,CAFpB,EAGGC,KAHH,CAGSC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAHhB;AAID,KAhBa;;AAAA,SAkBdG,aAlBc,GAkBE,CAAC;AAAEC,MAAAA,OAAF;AAAYC,MAAAA,SAAZ;AAAuBC,MAAAA,SAAvB;AAAkCC,MAAAA;AAAlC,KAAD,KACd;AAAK,MAAA,GAAG,EAAEH,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAMA,OAAN,CADD,SACwBC,SADxB,OACmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADnC,OAC0CC,SAD1C,OACqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADrD,OAC4DC,gBAD5D,EAC6E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD7E,CAnBY;;AAAA,SAwBdC,IAxBc,GAwBR,CAAC;AAACH,MAAAA;AAAD,KAAD,KACJ;AAAK,MAAA,GAAG,EAAGA,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIA,SAAJ,CAAJ,CADF,CAzBY;;AAEZ,SAAKI,KAAL,GAAa;AACXpB,MAAAA,IAAI,EAAE;AADK,KAAb;AAGD;;AAEDqB,EAAAA,iBAAiB,GAAG;AAClB,SAAKnB,QAAL;AACD;;AAqBDoB,EAAAA,MAAM,GAAG;AAAA,UACCtB,IADD,GACU,KAAKoB,KADf,CACCpB,IADD;AAEP,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMA,IAAI,CAACuB,GAAL,CAAS,KAAKT,aAAd,CAAN,OAAP;AACD;;AAlCyC","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class tree extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      tree: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getTrees();\r\n  }\r\n\r\n  getTrees = _ => {\r\n    fetch(\"http://localhost:3001/tree\")\r\n      .then(response => response.json())\r\n      .then(response => this.setState({ tree: response.data }))\r\n      .catch(err => console.error(err));\r\n  };\r\n\r\n  renderProduct = ({ tree_id , tree_name, tree_type, tree_description }) => (\r\n    <div key={tree_id}>\r\n     <h1> {tree_id}</h1> : {tree_name} <br/> {tree_type} <br/> {tree_description}<br/>\r\n    </div>\r\n  );\r\n\r\n  rest =({tree_name}) => (\r\n    <div key ={tree_name}>\r\n      <h1><b>{tree_name}</b></h1>\r\n    </div>\r\n  )\r\n\r\n  render() {\r\n    const { tree } = this.state;\r\n    return <div>{tree.map(this.renderProduct) }ol</div>;\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}